name: CI/CD Pipeline - Sonar + Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm test

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          args: >
            -Dproject.settings=sonar.project.properties
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build_and_deploy:
    name: Build, Push to ECR, and Deploy to EKS
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          docker build -t video-api .

      - name: Push Docker Image to Amazon ECR
        env:
          ECR_URL: 345124661122.dkr.ecr.us-east-1.amazonaws.com/video-api
        run: |
          docker tag video-api:latest $ECR_URL:latest
          docker push $ECR_URL:latest

      - name: Configure Kubectl
        env:
          EKS_CLUSTER_NAME: EKS-FIAP-Hackathon
        run: |
          aws eks update-kubeconfig --region us-east-1 --name $EKS_CLUSTER_NAME

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/Service.yaml
          kubectl apply -f k8s/Deployment.yaml
